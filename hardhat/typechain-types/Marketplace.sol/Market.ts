/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type TokenTypeStruct = {
  _id: BigNumberish;
  _owner: AddressLike;
  _asset: string;
  _category: string;
  _type: string;
  _name: string;
};

export type TokenTypeStructOutput = [
  _id: bigint,
  _owner: string,
  _asset: string,
  _category: string,
  _type: string,
  _name: string
] & {
  _id: bigint;
  _owner: string;
  _asset: string;
  _category: string;
  _type: string;
  _name: string;
};

export type ListingTypeStruct = {
  _id: BigNumberish;
  _price: BigNumberish;
  _token: TokenTypeStruct;
  _active: boolean;
};

export type ListingTypeStructOutput = [
  _id: bigint,
  _price: bigint,
  _token: TokenTypeStructOutput,
  _active: boolean
] & {
  _id: bigint;
  _price: bigint;
  _token: TokenTypeStructOutput;
  _active: boolean;
};

export interface MarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_buyToken"
      | "_cancelListing"
      | "_createListing"
      | "_editListing"
      | "_getListings"
      | "_listing"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;

  encodeFunctionData(
    functionFragment: "_buyToken",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_cancelListing",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_createListing",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_editListing",
    values: [BigNumberish, BigNumberish, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "_getListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_listing",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_buyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_createListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_editListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_listing", data: BytesLike): Result;
}

export namespace TransferEvent {
  export type InputTuple = [
    _from: AddressLike,
    _to: AddressLike,
    _tokenId: BigNumberish
  ];
  export type OutputTuple = [_from: string, _to: string, _tokenId: bigint];
  export interface OutputObject {
    _from: string;
    _to: string;
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Market extends BaseContract {
  connect(runner?: ContractRunner | null): Market;
  waitForDeployment(): Promise<this>;

  interface: MarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _buyToken: TypedContractMethod<
    [_listingId: BigNumberish, buyer: AddressLike],
    [void],
    "payable"
  >;

  _cancelListing: TypedContractMethod<
    [_listingId: BigNumberish, _owner: AddressLike],
    [void],
    "nonpayable"
  >;

  _createListing: TypedContractMethod<
    [tokenId: BigNumberish, price: BigNumberish, _owner: AddressLike],
    [boolean],
    "nonpayable"
  >;

  _editListing: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _listingId: BigNumberish,
      _owner: AddressLike,
      newPrice: BigNumberish,
      _isListed: boolean
    ],
    [void],
    "nonpayable"
  >;

  _getListings: TypedContractMethod<[], [ListingTypeStructOutput[]], "view">;

  _listing: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, TokenTypeStructOutput, boolean] & {
        _id: bigint;
        _price: bigint;
        _token: TokenTypeStructOutput;
        _active: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_buyToken"
  ): TypedContractMethod<
    [_listingId: BigNumberish, buyer: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "_cancelListing"
  ): TypedContractMethod<
    [_listingId: BigNumberish, _owner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_createListing"
  ): TypedContractMethod<
    [tokenId: BigNumberish, price: BigNumberish, _owner: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_editListing"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _listingId: BigNumberish,
      _owner: AddressLike,
      newPrice: BigNumberish,
      _isListed: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_getListings"
  ): TypedContractMethod<[], [ListingTypeStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "_listing"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, TokenTypeStructOutput, boolean] & {
        _id: bigint;
        _price: bigint;
        _token: TokenTypeStructOutput;
        _active: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
