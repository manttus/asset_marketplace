/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type TokenTypeStruct = {
  _id: BigNumberish;
  _owner: AddressLike;
  _asset: string;
  _category: string;
  _type: string;
  _name: string;
};

export type TokenTypeStructOutput = [
  _id: bigint,
  _owner: string,
  _asset: string,
  _category: string,
  _type: string,
  _name: string
] & {
  _id: bigint;
  _owner: string;
  _asset: string;
  _category: string;
  _type: string;
  _name: string;
};

export interface NFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_balanceOf"
      | "_getContractAddress"
      | "_getTokens"
      | "_isExists"
      | "_mint"
      | "_ownerOf"
      | "_transferFrom"
      | "getLength"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;

  encodeFunctionData(
    functionFragment: "_balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_getContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_isExists",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_mint",
    values: [string, string, string, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getLength", values: [string]): string;

  decodeFunctionResult(functionFragment: "_balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_isExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLength", data: BytesLike): Result;
}

export namespace TransferEvent {
  export type InputTuple = [
    _from: AddressLike,
    _to: AddressLike,
    _tokenId: BigNumberish
  ];
  export type OutputTuple = [_from: string, _to: string, _tokenId: bigint];
  export interface OutputObject {
    _from: string;
    _to: string;
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFT extends BaseContract {
  connect(runner?: ContractRunner | null): NFT;
  waitForDeployment(): Promise<this>;

  interface: NFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _balanceOf: TypedContractMethod<[_owner: AddressLike], [bigint], "view">;

  _getContractAddress: TypedContractMethod<[], [string], "view">;

  _getTokens: TypedContractMethod<
    [_own: AddressLike],
    [TokenTypeStructOutput[]],
    "view"
  >;

  _isExists: TypedContractMethod<
    [_asset: string, _name: string],
    [boolean],
    "view"
  >;

  _mint: TypedContractMethod<
    [
      _name: string,
      _asset: string,
      _category: string,
      _type: string,
      _sender: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  _ownerOf: TypedContractMethod<
    [_id: BigNumberish],
    [TokenTypeStructOutput],
    "view"
  >;

  _transferFrom: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getLength: TypedContractMethod<[_str: string], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_balanceOf"
  ): TypedContractMethod<[_owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "_getContractAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_getTokens"
  ): TypedContractMethod<
    [_own: AddressLike],
    [TokenTypeStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "_isExists"
  ): TypedContractMethod<[_asset: string, _name: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "_mint"
  ): TypedContractMethod<
    [
      _name: string,
      _asset: string,
      _category: string,
      _type: string,
      _sender: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_ownerOf"
  ): TypedContractMethod<[_id: BigNumberish], [TokenTypeStructOutput], "view">;
  getFunction(
    nameOrSignature: "_transferFrom"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getLength"
  ): TypedContractMethod<[_str: string], [bigint], "view">;

  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
